"""
Teste do Sistema Completo de Recupera√ß√£o de Senha - FAD
Verifica todos os componentes do sistema
"""

import os
import sys
import time
import logging
from pathlib import Path

# Configura√ß√£o do logger
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def verificar_arquivos_sistema():
    """Verifica se todos os arquivos necess√°rios existem"""
    print("\nüîç VERIFICANDO ARQUIVOS DO SISTEMA...")
    print("=" * 60)
    
    arquivos_obrigatorios = [
        "app/api/endpoints/au_recuperacao_senha.py",
        "app/services/email_service.py",
        "app/api/endpoints/cd_cadastro_usuario_sistema.py",
        "monitorar_emails.py",
        "sistema_backup_configuracoes.py",
        ".env"
    ]
    
    templates_obrigatorios = [
        "app/templates/au_recuperar_senha.html",
        "app/templates/au_redefinir_senha.html", 
        "app/templates/au_email_enviado.html",
        "app/templates/au_senha_alterada.html",
        "app/templates/au_token_invalido.html"
    ]
    
    todos_ok = True
    
    for arquivo in arquivos_obrigatorios:
        caminho = Path(arquivo)
        if caminho.exists():
            tamanho = caminho.stat().st_size
            print(f"‚úÖ {arquivo} - {tamanho} bytes")
        else:
            print(f"‚ùå {arquivo} - ARQUIVO FALTANDO!")
            todos_ok = False
    
    print("\nüìÑ TEMPLATES HTML:")
    for template in templates_obrigatorios:
        caminho = Path(template)
        if caminho.exists():
            tamanho = caminho.stat().st_size
            print(f"‚úÖ {template} - {tamanho} bytes")
        else:
            print(f"‚ùå {template} - TEMPLATE FALTANDO!")
            todos_ok = False
    
    return todos_ok

def verificar_configuracoes_env():
    """Verifica configura√ß√µes do arquivo .env"""
    print("\n‚öôÔ∏è VERIFICANDO CONFIGURA√á√ïES DO .env...")
    print("=" * 60)
    
    configuracoes_necessarias = [
        "SMTP_SERVER",
        "SMTP_PORT", 
        "SMTP_USERNAME",
        "SMTP_PASSWORD",
        "SMTP_FROM_EMAIL",
        "SMTP_FROM_NAME",
        "ENVIRONMENT"
    ]
    
    todas_ok = True
    
    for config in configuracoes_necessarias:
        valor = os.getenv(config)
        if valor:
            if config == "SMTP_PASSWORD":
                if valor in ["", "sua_senha_de_app_aqui", "Malditas131533*", "DESENVOLVIMENTO"]:
                    print(f"‚ö†Ô∏è {config} = VALOR PADR√ÉO (configure senha real)")
                else:
                    print(f"‚úÖ {config} = {'*' * len(valor)} (configurado)")
            else:
                print(f"‚úÖ {config} = {valor}")
        else:
            print(f"‚ùå {config} = N√ÉO CONFIGURADO")
            todas_ok = False
    
    return todas_ok

def testar_importacoes():
    """Testa se todos os m√≥dulos podem ser importados"""
    print("\nüì¶ TESTANDO IMPORTA√á√ïES...")
    print("=" * 60)
    
    imports_ok = True
    
    try:
        # Adiciona o diret√≥rio atual ao path
        sys.path.insert(0, os.getcwd())
        
        # Testa importa√ß√£o do email service
        from app.services.email_service import email_service
        print("‚úÖ EmailService importado com sucesso")
        
        # Testa configura√ß√£o do email service
        if email_service.testar_configuracao():
            print("‚úÖ Configura√ß√£o de email v√°lida")
        else:
            print("‚ö†Ô∏è Configura√ß√£o de email com problemas (modo desenvolvimento ativo)")
            
    except Exception as e:
        print(f"‚ùå Erro ao importar EmailService: {e}")
        imports_ok = False
    
    try:
        # Testa importa√ß√£o do monitor
        from monitorar_emails import email_monitor
        print("‚úÖ Monitor de emails importado com sucesso")
        
    except Exception as e:
        print(f"‚ùå Erro ao importar Monitor: {e}")
        imports_ok = False
    
    try:
        # Testa importa√ß√£o do sistema de backup
        from sistema_backup_configuracoes import SistemaBackupConfiguracoes
        backup_system = SistemaBackupConfiguracoes()
        print("‚úÖ Sistema de backup importado com sucesso")
        
    except Exception as e:
        print(f"‚ùå Erro ao importar Sistema de Backup: {e}")
        imports_ok = False
    
    return imports_ok

def testar_envio_email_simulado():
    """Testa envio de email em modo simulado"""
    print("\nüìß TESTANDO ENVIO DE EMAIL (SIMULADO)...")
    print("=" * 60)
    
    try:
        sys.path.insert(0, os.getcwd())
        from app.services.email_service import email_service
        
        # Testa email de recupera√ß√£o
        print("üîÑ Testando email de recupera√ß√£o de senha...")
        resultado = email_service.enviar_email_recuperacao_senha(
            destinatario_email="vpcapanema@der.sp.gov.br",
            destinatario_nome="Vin√≠cius Capanema",
            token_recuperacao="abc123",
            base_url="http://localhost:8000",
            ip_origem="127.0.0.1",
            user_agent="TestAgent"
        )
        
        if resultado:
            print("‚úÖ Email de recupera√ß√£o testado com sucesso")
        else:
            print("‚ùå Falha no teste de email de recupera√ß√£o")
            return False
        
        # Testa email de confirma√ß√£o
        print("\nüîÑ Testando email de confirma√ß√£o de cadastro...")
        resultado = email_service.enviar_email_confirmacao_cadastro(
            destinatario_email="vpcapanema@der.sp.gov.br",
            destinatario_nome="Vin√≠cius Capanema",
            comprovante_pdf_path="teste.pdf",
            dados_cadastro={"nome": "Vin√≠cius Capanema", "tipo": "administrador", "cpf": "123.456.789-00"},
            ip_origem="127.0.0.1",
            user_agent="TestAgent"
        )
        
        if resultado:
            print("‚úÖ Email de confirma√ß√£o testado com sucesso")
        else:
            print("‚ùå Falha no teste de email de confirma√ß√£o")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de email: {e}")
        return False

def testar_sistema_backup():
    """Testa sistema de backup"""
    print("\nüíæ TESTANDO SISTEMA DE BACKUP...")
    print("=" * 60)
    
    try:
        from sistema_backup_configuracoes import SistemaBackupConfiguracoes
        
        backup_system = SistemaBackupConfiguracoes()
        
        # Testa cria√ß√£o de backup das configura√ß√µes
        print("üîÑ Testando backup das configura√ß√µes...")
        resultado = backup_system.backup_configuracoes_sistema()
        
        if resultado:
            print(f"‚úÖ Backup das configura√ß√µes criado: {Path(resultado).name}")
        else:
            print("‚ùå Falha ao criar backup das configura√ß√µes")
            return False
        
        # Testa listagem de backups
        print("\nüîÑ Testando listagem de backups...")
        backups = backup_system.listar_backups()
        print(f"‚úÖ {len(backups)} backups encontrados")
        
        # Testa relat√≥rio
        print("\nüîÑ Testando relat√≥rio de backups...")
        relatorio = backup_system.relatorio_backups()
        
        if "erro" not in relatorio:
            print("‚úÖ Relat√≥rio de backups gerado com sucesso")
            print(f"   Total de backups: {relatorio['total_backups']}")
            print(f"   Espa√ßo utilizado: {relatorio['espaco_utilizado']}")
        else:
            print(f"‚ùå Erro no relat√≥rio: {relatorio['erro']}")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de backup: {e}")
        return False

def testar_monitor_emails():
    """Testa sistema de monitoramento de emails"""
    print("\nüìä TESTANDO MONITOR DE EMAILS...")
    print("=" * 60)
    
    try:
        from monitorar_emails import email_monitor
        
        # Testa registro de envio
        print("üîÑ Testando registro de envio...")
        email_monitor.registrar_envio(
            tipo_email="teste",
            destinatario="teste@example.com",
            remetente="sistema@test.com",
            assunto="Teste de Sistema",
            status="teste",
            tempo_processamento_ms=100
        )
        print("‚úÖ Registro de envio testado com sucesso")
        
        # Testa gera√ß√£o de relat√≥rio
        print("\nüîÑ Testando relat√≥rio de emails...")
        relatorio = email_monitor.gerar_relatorio()
        
        if relatorio:
            print("‚úÖ Relat√≥rio de emails gerado com sucesso")
            print(f"   Total de envios: {relatorio.get('total_envios', 0)}")
        else:
            print("‚ùå Falha ao gerar relat√≥rio")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de monitor: {e}")
        return False

def gerar_relatorio_final():
    """Gera relat√≥rio final do teste"""
    print("\nüìã RELAT√ìRIO FINAL DO SISTEMA")
    print("=" * 60)
    
    # Informa√ß√µes do ambiente
    print(f"üîß Ambiente: {os.getenv('ENVIRONMENT', 'development')}")
    print(f"üîå SMTP Configurado: {'Sim' if os.getenv('SMTP_PASSWORD') else 'N√£o'}")
    print(f"üìÅ Diret√≥rio: {os.getcwd()}")
    print(f"üêç Python: {sys.version}")
    
    # Estat√≠sticas dos arquivos
    total_arquivos = 0
    tamanho_total = 0
    
    arquivos_projeto = [
        "app/api/endpoints/au_recuperacao_senha.py",
        "app/services/email_service.py", 
        "app/api/endpoints/cd_cadastro_usuario_sistema.py",
        "monitorar_emails.py",
        "sistema_backup_configuracoes.py"
    ]
    
    for arquivo in arquivos_projeto:
        caminho = Path(arquivo)
        if caminho.exists():
            total_arquivos += 1
            tamanho_total += caminho.stat().st_size
    
    print(f"\nüìä ESTAT√çSTICAS:")
    print(f"   Arquivos principais: {total_arquivos}")
    print(f"   Tamanho total: {tamanho_total:,} bytes")
    
    # Verifica se h√° logs
    if Path("email_logs.db").exists():
        tamanho_logs = Path("email_logs.db").stat().st_size
        print(f"   Banco de logs: {tamanho_logs:,} bytes")
    
    # Verifica backups
    diretorio_backup = Path("backups_configuracao")
    if diretorio_backup.exists():
        backups = list(diretorio_backup.glob("*"))
        print(f"   Backups dispon√≠veis: {len(backups)}")

def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ TESTE COMPLETO DO SISTEMA DE RECUPERA√á√ÉO DE SENHA - FAD")
    print("=" * 70)
    print(f"‚è∞ Iniciado em: {time.strftime('%d/%m/%Y %H:%M:%S')}")
    
    resultados = {}
    
    # Executa todos os testes
    resultados["arquivos"] = verificar_arquivos_sistema()
    resultados["configuracoes"] = verificar_configuracoes_env()
    resultados["importacoes"] = testar_importacoes()
    resultados["email"] = testar_envio_email_simulado()
    resultados["backup"] = testar_sistema_backup()
    resultados["monitor"] = testar_monitor_emails()
    
    # Calcula resultados
    total_testes = len(resultados)
    testes_ok = sum(1 for resultado in resultados.values() if resultado)
    
    print("\nüéØ RESUMO DOS TESTES")
    print("=" * 60)
    
    for nome, resultado in resultados.items():
        status = "‚úÖ APROVADO" if resultado else "‚ùå REPROVADO"
        print(f"{nome.capitalize():15} {status}")
    
    print(f"\nüìä RESULTADO GERAL: {testes_ok}/{total_testes} testes aprovados")
    
    if testes_ok == total_testes:
        print("üéâ SISTEMA COMPLETAMENTE FUNCIONAL!")
        print("\n‚úÖ Pr√≥ximos passos:")
        print("   1. Configure SMTP_PASSWORD para produ√ß√£o")
        print("   2. Execute o sistema em ambiente de produ√ß√£o")
        print("   3. Monitore os logs de email")
        print("   4. Fa√ßa backups regulares")
    else:
        print("‚ö†Ô∏è SISTEMA COM PROBLEMAS - Verifique os itens reprovados")
    
    gerar_relatorio_final()
    
    print(f"\n‚è∞ Conclu√≠do em: {time.strftime('%d/%m/%Y %H:%M:%S')}")

if __name__ == "__main__":
    main()
