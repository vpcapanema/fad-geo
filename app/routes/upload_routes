from fastapi import APIRouter, UploadFile, File, HTTPException
from pathlib import Path
import uuid
import shutil
import aiofiles
from app.config import UPLOAD_BASE

router = APIRouter(prefix="/api/upload", tags=["Upload"])

def create_project_dir() -> Path:
    """Cria um diretório único para cada projeto"""
    project_id = f"proj_{uuid.uuid4().hex[:6]}"
    project_path = UPLOAD_BASE / project_id
    project_path.mkdir(exist_ok=True)
    return project_path

@router.post("/shapefile")
async def upload_shapefile(file: UploadFile = File(...)):
    try:
        project_dir = create_project_dir()
        file_path = project_dir / file.filename
        
        # Salva o arquivo de forma assíncrona
        async with aiofiles.open(file_path, 'wb') as buffer:
            content = await file.read()
            await buffer.write(content)
        
        return {
            "status": "success",
            "project_id": project_dir.name,
            "path": str(file_path.relative_to(UPLOAD_BASE)),
            "size_mb": f"{len(content)/(1024*1024):.2f}"
        }

    except Exception as e:
        # Limpeza em caso de erro
        if 'project_dir' in locals():
            shutil.rmtree(project_dir, ignore_errors=True)
        raise HTTPException(status_code=500, detail=str(e))
    
    from fastapi import APIRouter, UploadFile, File, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

router = APIRouter()
templates = Jinja2Templates(directory="app/templates")

@router.get("/upload", response_class=HTMLResponse)
async def show_upload_page(request: Request):
    return templates.TemplateResponse("upload.html", {"request": request})

@router.post("/upload/process")
async def handle_upload(
    request: Request,
    projeto: str = Form(...),
    arquivo: UploadFile = File(...)
):
    # Sua lógica original de processamento aqui
    return templates.TemplateResponse("success.html", {
        "request": request,
        "filename": arquivo.filename
    })
