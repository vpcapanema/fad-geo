"""
Servi√ßo de Gera√ß√£o e Controle de Formul√°rios HTML de Cadastro de Usu√°rio
Respons√°vel por:
- Gera√ß√£o de formul√°rios HTML a partir do template
- Controle de vers√µes dos formul√°rios 
- Sincroniza√ß√£o com dados do banco
- Gest√£o de diret√≥rios por usu√°rio
- Suporte para m√∫ltiplos tipos de usu√°rio por CPF (master, coordenador, analista)
"""

import os
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional, List
from sqlalchemy.orm import Session
from sqlalchemy import text
from jinja2 import Environment, FileSystemLoader

from app.models.cd_usuario_sistema import UsuarioSistema
from app.models.cd_pessoa_fisica import PessoaFisica

logger = logging.getLogger(__name__)

class FormularioService:
    def __init__(self):
        # Diret√≥rio base conforme especifica√ß√£o
        self.base_dir = Path("c:/Users/vinic/fad-geo/formularios_cadastro_usuarios")
        self.template_dir = Path("c:/Users/vinic/fad-geo/app/templates/formularios_cadastro_usuarios")
        self.template_file = "cadastro_usuario_template.html"
        
        # Cria diret√≥rio base se n√£o existir
        self.base_dir.mkdir(parents=True, exist_ok=True)
        
        # Configura Jinja2
        self.jinja_env = Environment(
            loader=FileSystemLoader(str(self.template_dir)),
            autoescape=True
        )
        
    def _extrair_usuario_email(self, email_institucional: str) -> str:
        """Extrai o nome de usu√°rio do email institucional (parte antes do @)"""
        if not email_institucional or '@' not in email_institucional:
            raise ValueError("Email institucional inv√°lido para extrair nome de usu√°rio")
        return email_institucional.split('@')[0]
    
    def _criar_diretorio_usuario(self, email_institucional: str, data_criacao: datetime = None) -> Path:
        """
        Cria estrutura de diret√≥rios para o usu√°rio conforme especifica√ß√£o:
        - Pasta principal: [usuario_email]_[data] 
        - Exemplo: bdalves_20250611
        """
        if data_criacao is None:
            data_criacao = datetime.now()
            
        usuario_nome = self._extrair_usuario_email(email_institucional)
        data_str = data_criacao.strftime("%Y%m%d")
        
        # Nome do diret√≥rio principal do usu√°rio
        nome_pasta_usuario = f"{usuario_nome}_{data_str}"
        user_dir = self.base_dir / nome_pasta_usuario
        
        # Cria o diret√≥rio se n√£o existir
        user_dir.mkdir(parents=True, exist_ok=True)
        
        logger.info(f"üìÅ Diret√≥rio do usu√°rio criado/verificado: {user_dir}")
        return user_dir
    
    def _criar_subpasta_tipo(self, user_dir: Path, tipo_usuario: str) -> Path:
        """
        Cria subpasta para o tipo de usu√°rio dentro do diret√≥rio principal
        - Exemplo: tipo_coordenador, tipo_analista, tipo_master
        """
        nome_subpasta = f"tipo_{tipo_usuario}"
        tipo_dir = user_dir / nome_subpasta
        
        # Cria a subpasta se n√£o existir
        tipo_dir.mkdir(parents=True, exist_ok=True)
        
        logger.info(f"üìÅ Subpasta do tipo criada/verificada: {tipo_dir}")
        return tipo_dir
        
    def _obter_proxima_versao(self, tipo_dir: Path, usuario_id: int, tipo_usuario: str) -> int:
        """
        Obt√©m a pr√≥xima vers√£o do formul√°rio analisando os arquivos existentes na pasta
        Analisa os arquivos que seguem o padr√£o: [usuario_id]_[tipo]_[data]_v[versao].html
        """
        try:
            # Lista todos os arquivos HTML na pasta do tipo
            pattern = f"{usuario_id}_{tipo_usuario}_*_v*.html"
            arquivos = list(tipo_dir.glob(pattern))
            
            if not arquivos:
                return 1  # Primeira vers√£o
            
            # Extrai os n√∫meros de vers√£o dos arquivos existentes
            versoes = []
            for arquivo in arquivos:
                nome = arquivo.stem  # Nome sem extens√£o
                if '_v' in nome:
                    try:
                        versao_str = nome.split('_v')[-1]
                        versao = int(versao_str)
                        versoes.append(versao)
                    except ValueError:
                        continue
            
            # Retorna a pr√≥xima vers√£o
            return max(versoes) + 1 if versoes else 1
            
        except Exception as e:
            logger.error(f"Erro ao obter pr√≥xima vers√£o: {e}")
            return 1
    
    def gerar_formulario_html(self, db: Session, usuario_id: int) -> str:
        """
        Gera formul√°rio HTML para o usu√°rio seguindo as especifica√ß√µes:
        1. Cria pasta: [usuario_email]_[data] em formularios_cadastro_usuarios/
        2. Cria subpasta: tipo_[tipo_usuario]
        3. Gera HTML a partir do template com dados do banco
        4. Salva como: [usuario_id]_[tipo]_[data]_v[versao].html
        
        Retorna o caminho completo do arquivo HTML gerado
        """
        try:
            logger.info(f"üîß Iniciando gera√ß√£o de formul√°rio HTML para usu√°rio {usuario_id}")
            
            # 1. Busca dados do usu√°rio no banco
            usuario = db.query(UsuarioSistema).filter(UsuarioSistema.id == usuario_id).first()
            if not usuario:
                raise Exception(f"Usu√°rio {usuario_id} n√£o encontrado no banco de dados")
            
            # Valida se tem email institucional
            if not usuario.email_institucional:
                raise Exception(f"Usu√°rio {usuario_id} n√£o possui email institucional cadastrado")
            
            logger.info(f"üìã Dados do usu√°rio carregados - ID: {usuario.id}, Tipo: {usuario.tipo}, Email: {usuario.email_institucional}")
            
            # 2. Busca dados da pessoa f√≠sica se dispon√≠vel
            pessoa_fisica = None
            if usuario.pessoa_fisica_id:
                pessoa_fisica = db.query(PessoaFisica).filter(
                    PessoaFisica.id == usuario.pessoa_fisica_id
                ).first()
                logger.info(f"üìã Dados da pessoa f√≠sica carregados - ID: {pessoa_fisica.id if pessoa_fisica else 'N√£o encontrada'}")
            
            # 3. Cria estrutura de diret√≥rios conforme especifica√ß√£o
            # Pasta principal: [usuario_email]_[data]
            user_dir = self._criar_diretorio_usuario(usuario.email_institucional)
            
            # Subpasta: tipo_[tipo_usuario]
            tipo_dir = self._criar_subpasta_tipo(user_dir, usuario.tipo)
            
            # 4. Obt√©m pr√≥xima vers√£o do formul√°rio
            proxima_versao = self._obter_proxima_versao(tipo_dir, usuario.id, usuario.tipo)
            
            # 5. Prepara dados para o template
            dados_template = {
                'usuario': usuario,
                'pessoa_fisica': pessoa_fisica or {},
                'data_geracao': datetime.now()
            }
            
            logger.info(f"üìÑ Carregando template de: {self.template_dir}/{self.template_file}")
            
            # 6. Carrega e renderiza o template
            template = self.jinja_env.get_template(self.template_file)
            html_content = template.render(**dados_template)
            
            logger.info(f"‚úÖ Template renderizado com sucesso - Tamanho: {len(html_content)} caracteres")
            
            # 7. Define nome do arquivo conforme especifica√ß√£o: [usuario_id]_[tipo]_[data]_v[versao].html
            data_hoje = datetime.now().strftime("%Y%m%d")
            nome_arquivo = f"{usuario.id}_{usuario.tipo}_{data_hoje}_v{proxima_versao}.html"
            caminho_arquivo = tipo_dir / nome_arquivo
            
            # 8. Salva o arquivo HTML
            with open(caminho_arquivo, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            # Verifica se o arquivo foi criado
            if not caminho_arquivo.exists():
                raise Exception(f"Falha ao criar arquivo HTML: {caminho_arquivo}")
            
            tamanho_arquivo = caminho_arquivo.stat().st_size
            logger.info(f"‚úÖ Formul√°rio HTML salvo com sucesso:")
            logger.info(f"   üìÅ Caminho: {caminho_arquivo}")
            logger.info(f"   üìä Tamanho: {tamanho_arquivo} bytes")
            logger.info(f"   üî¢ Vers√£o: {proxima_versao}")
            
            # 9. Registra na tabela de controle (opcional, para auditoria)
            try:
                db.execute(
                    text("""
                    INSERT INTO formularios_usuario (
                        usuario_id, arquivo_nome, caminho_completo, 
                        data_geracao, versao, ativo, tamanho_arquivo, status,
                        hash_conteudo, observacoes
                    ) VALUES (
                        :usuario_id, :arquivo_nome, :caminho_completo,
                        :data_geracao, :versao, :ativo, :tamanho_arquivo, :status,
                        :hash_conteudo, :observacoes
                    )
                    """),
                    {
                        'usuario_id': usuario.id,
                        'arquivo_nome': nome_arquivo,
                        'caminho_completo': str(caminho_arquivo),
                        'data_geracao': datetime.now(),
                        'versao': proxima_versao,
                        'ativo': True,
                        'tamanho_arquivo': tamanho_arquivo,
                        'status': 'ativo',
                        'hash_conteudo': f"html_{usuario.id}_{usuario.tipo}_{data_hoje}_v{proxima_versao}",
                        'observacoes': f"Formul√°rio HTML gerado automaticamente para usu√°rio {usuario.tipo} (Email: {usuario.email_institucional})"
                    }
                )
                db.commit()
                logger.info(f"üìù Registro de auditoria criado na tabela formularios_usuario")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Falha ao registrar na tabela de auditoria (n√£o cr√≠tico): {e}")
                # N√£o interrompe o processo se falhar o registro de auditoria
            
            # Retorna o caminho completo do arquivo gerado
            return str(caminho_arquivo)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar formul√°rio HTML para usu√°rio {usuario_id}: {e}")
            logger.error(f"‚ùå Tipo do erro: {type(e)}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            raise
    
    def atualizar_formulario_usuario(self, db: Session, usuario_id: int) -> str:
        """
        Atualiza o formul√°rio de um usu√°rio espec√≠fico com dados atuais do banco
        Usado quando dados do usu√°rio s√£o modificados
        """
        try:
            logger.info(f"üîÑ Atualizando formul√°rio do usu√°rio {usuario_id}")
            return self.gerar_formulario_html(db, usuario_id)
        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar formul√°rio do usu√°rio {usuario_id}: {e}")
            raise

# Inst√¢ncia global do servi√ßo
formulario_service = FormularioService()
