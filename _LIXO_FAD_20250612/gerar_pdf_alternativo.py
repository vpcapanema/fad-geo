"""
Gerador de PDF alternativo usando reportlab
Para casos onde wkhtmltopdf n√£o est√° dispon√≠vel
"""

import os
from datetime import datetime
from reportlab.lib.pagesizes import letter, A4
from reportlab.pdfgen import canvas
from reportlab.lib.colors import black, blue, green
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.units import inch

def gerar_comprovante_cadastro_pdf(usuario_dados, pessoa_fisica_dados, caminho_arquivo):
    """
    Gera comprovante de cadastro em PDF usando reportlab
    
    Args:
        usuario_dados: Dados do usu√°rio
        pessoa_fisica_dados: Dados da pessoa f√≠sica
        caminho_arquivo: Caminho onde salvar o PDF
    
    Returns:
        bool: True se gerado com sucesso
    """
    try:
        # Cria documento
        doc = SimpleDocTemplate(
            caminho_arquivo,
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=18
        )
        
        # Estilos
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            textColor=blue,
            spaceAfter=30,
            alignment=1  # Center
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=14,
            textColor=black,
            spaceAfter=12
        )
        
        normal_style = styles['Normal']
        
        # Conte√∫do do documento
        story = []
        
        # Cabe√ßalho
        story.append(Paragraph("FAD - FERRAMENTA DE AN√ÅLISE DINAMIZADA", title_style))
        story.append(Paragraph("COMPROVANTE DE CADASTRO DE USU√ÅRIO", title_style))
        story.append(Spacer(1, 20))
        
        # Informa√ß√µes do usu√°rio
        story.append(Paragraph("DADOS DO USU√ÅRIO", heading_style))
        
        dados_usuario = [
            ["Nome Completo:", usuario_dados.get('nome', 'N/A')],
            ["CPF:", usuario_dados.get('cpf', 'N/A')],
            ["Tipo de Usu√°rio:", usuario_dados.get('tipo', 'N/A').title()],
            ["Email Pessoal:", usuario_dados.get('email', 'N/A')],
            ["Telefone:", usuario_dados.get('telefone', 'N/A')],
            ["Status:", usuario_dados.get('status', 'Aguardando Aprova√ß√£o')],
        ]
        
        table_usuario = Table(dados_usuario, colWidths=[2*inch, 3.5*inch])
        table_usuario.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), '#f0f0f0'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, black),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('LEFTPADDING', (0, 0), (-1, -1), 6),
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ]))
        
        story.append(table_usuario)
        story.append(Spacer(1, 20))
        
        # Informa√ß√µes institucionais (se dispon√≠veis)
        if usuario_dados.get('email_institucional'):
            story.append(Paragraph("DADOS INSTITUCIONAIS", heading_style))
            
            dados_institucionais = [
                ["Institui√ß√£o:", usuario_dados.get('instituicao', 'N/A')],
                ["Email Institucional:", usuario_dados.get('email_institucional', 'N/A')],
                ["Telefone Institucional:", usuario_dados.get('telefone_institucional', 'N/A')],
                ["Ramal:", usuario_dados.get('ramal', 'N/A')],
                ["Tipo de Lota√ß√£o:", usuario_dados.get('tipo_lotacao', 'N/A')],
            ]
            
            # Adiciona dados de sede se dispon√≠vel
            if usuario_dados.get('sede_hierarquia'):
                dados_institucionais.extend([
                    ["Sede - Hierarquia:", usuario_dados.get('sede_hierarquia', 'N/A')],
                    ["Sede - Coordenadoria:", usuario_dados.get('sede_coordenadoria', 'N/A')],
                    ["Sede - Setor:", usuario_dados.get('sede_setor', 'N/A')],
                ])
            
            # Adiciona dados regionais se dispon√≠vel
            if usuario_dados.get('regional_nome'):
                dados_institucionais.extend([
                    ["Regional - Nome:", usuario_dados.get('regional_nome', 'N/A')],
                    ["Regional - Coordenadoria:", usuario_dados.get('regional_coordenadoria', 'N/A')],
                    ["Regional - Setor:", usuario_dados.get('regional_setor', 'N/A')],
                ])
            
            table_institucional = Table(dados_institucionais, colWidths=[2*inch, 3.5*inch])
            table_institucional.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (0, -1), '#f0f0f0'),
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ('LEFTPADDING', (0, 0), (-1, -1), 6),
                ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                ('TOPPADDING', (0, 0), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ]))
            
            story.append(table_institucional)
            story.append(Spacer(1, 20))
        
        # Informa√ß√µes da pessoa f√≠sica vinculada (se dispon√≠vel)
        if pessoa_fisica_dados:
            story.append(Paragraph("PESSOA F√çSICA VINCULADA", heading_style))
            
            dados_pf = [
                ["ID:", str(pessoa_fisica_dados.get('id', 'N/A'))],
                ["Nome:", pessoa_fisica_dados.get('nome', 'N/A')],
            ]
            
            table_pf = Table(dados_pf, colWidths=[2*inch, 3.5*inch])
            table_pf.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (0, -1), '#f0f0f0'),
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ('LEFTPADDING', (0, 0), (-1, -1), 6),
                ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                ('TOPPADDING', (0, 0), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ]))
            
            story.append(table_pf)
            story.append(Spacer(1, 20))
        
        # Informa√ß√µes de gera√ß√£o
        story.append(Paragraph("INFORMA√á√ïES DE GERA√á√ÉO", heading_style))
        
        dados_geracao = [
            ["Data de Cadastro:", datetime.now().strftime("%d/%m/%Y %H:%M:%S")],
            ["Sistema:", "FAD - Ferramenta de An√°lise Dinamizada"],
            ["Vers√£o do Documento:", "1.0"],
            ["ID do Usu√°rio:", str(usuario_dados.get('id', 'N/A'))],
        ]
        
        table_geracao = Table(dados_geracao, colWidths=[2*inch, 3.5*inch])
        table_geracao.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), '#f0f0f0'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, black),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('LEFTPADDING', (0, 0), (-1, -1), 6),
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ]))
        
        story.append(table_geracao)
        story.append(Spacer(1, 30))
        
        # Observa√ß√µes
        story.append(Paragraph("OBSERVA√á√ïES", heading_style))
        observacoes = [
            "‚Ä¢ Este comprovante confirma o cadastro no sistema FAD.",
            "‚Ä¢ O cadastro est√° sujeito √† aprova√ß√£o do administrador.",
            "‚Ä¢ Guarde este documento para seus registros.",
            "‚Ä¢ Em caso de d√∫vidas, entre em contato com o suporte t√©cnico."
        ]
        
        for obs in observacoes:
            story.append(Paragraph(obs, normal_style))
        
        story.append(Spacer(1, 20))
        
        # Rodap√©
        story.append(Paragraph("_" * 50, normal_style))
        story.append(Paragraph(
            "FAD - Ferramenta de An√°lise Dinamizada<br/>"
            "Departamento de Estradas de Rodagem do Estado de S√£o Paulo<br/>"
            f"Documento gerado automaticamente em {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}",
            ParagraphStyle(
                'Footer',
                parent=styles['Normal'],
                fontSize=8,
                textColor=black,
                alignment=1  # Center
            )
        ))
        
        # Gera o PDF
        doc.build(story)
        
        print(f"‚úÖ PDF gerado com sucesso: {caminho_arquivo}")
        print(f"üìè Tamanho: {os.path.getsize(caminho_arquivo)} bytes")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar PDF: {e}")
        return False

def testar_geracao_pdf():
    """Testa a gera√ß√£o de PDF"""
    print("üß™ TESTANDO GERA√á√ÉO DE PDF COM REPORTLAB")
    print("=" * 50)
    
    # Dados de teste
    usuario_teste = {
        'id': 1,
        'nome': 'Vin√≠cius Capanema (TESTE)',
        'cpf': '123.456.789-00',
        'email': 'vpcapanema@der.sp.gov.br',
        'telefone': '(11) 99999-9999',
        'tipo': 'administrador',
        'status': 'Aguardando Aprova√ß√£o',
        'instituicao': 'DER-SP',
        'email_institucional': 'vpcapanema@der.sp.gov.br',
        'telefone_institucional': '(11) 3311-1234',
        'ramal': '1234',
        'tipo_lotacao': 'sede',
        'sede_hierarquia': 'VPC',
        'sede_coordenadoria': 'GEOSER',
        'sede_setor': 'An√°lise de Dados'
    }
    
    pessoa_fisica_teste = {
        'id': 1,
        'nome': 'Vin√≠cius Capanema'
    }
    
    # Gera PDF de teste
    caminho_teste = "teste_comprovante_reportlab.pdf"
    
    resultado = gerar_comprovante_cadastro_pdf(
        usuario_teste, 
        pessoa_fisica_teste, 
        caminho_teste
    )
    
    if resultado and os.path.exists(caminho_teste):
        print("üéâ Teste conclu√≠do com sucesso!")
        print(f"üìÑ Arquivo gerado: {caminho_teste}")
        
        # Pergunta se quer testar envio por email
        enviar = input("\nDeseja testar envio por email? (s/N): ").lower().strip()
        if enviar == 's':
            testar_envio_email(caminho_teste)
    else:
        print("‚ùå Teste falhou")

def testar_envio_email(caminho_pdf):
    """Testa envio do PDF por email"""
    print("\nüìß TESTANDO ENVIO POR EMAIL...")
    
    try:
        import sys
        sys.path.insert(0, os.getcwd())
        
        from app.services.email_service import email_service
        
        resultado = email_service.enviar_email_confirmacao_cadastro(
            destinatario_email="vpcapanema@der.sp.gov.br",
            destinatario_nome="Vin√≠cius Capanema",
            comprovante_pdf_path=caminho_pdf,
            dados_cadastro={
                'nome': 'Vin√≠cius Capanema (TESTE REPORTLAB)',
                'tipo': 'administrador',
                'status': 'Teste de PDF com ReportLab'
            }
        )
        
        if resultado:
            print("‚úÖ Email enviado com sucesso!")
            print("üìß Verifique seu email institucional")
        else:
            print("‚ùå Falha no envio do email")
            
    except Exception as e:
        print(f"‚ùå Erro no teste de email: {e}")

if __name__ == "__main__":
    testar_geracao_pdf()
